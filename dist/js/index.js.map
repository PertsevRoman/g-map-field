{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/lib/map-marker.js","src/js/lib/map.js","src/js/lib/path-generator.js","src/js/lib/path.js","src/js/lib/renderer.js","src/js/lib/utils.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by joker on 13.12.16.\n *\n * Получение данных\n */\n\nimport {PathGenerator} from \"./lib/path-generator\";\nimport {GMap} from \"./lib/map\";\nimport Renderer from \"./lib/renderer\";\nimport {Path} from \"./lib/path\";\n\nconst componentName = 'path-input';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let componentAnchor = document.getElementsByTagName(componentName)[0];\n\n    if(componentAnchor == null) {\n        console.log('Component tag not founded');\n        return;\n    }\n    \n    let templateName = componentAnchor.getAttribute('template');\n    let fieldValue = componentAnchor.getAttribute('field-value');\n    let fieldName = componentAnchor.getAttribute('field-name');\n    let iconsResource = componentAnchor.getAttribute('icons-resource');\n\n    $.get(iconsResource, function (icons) {\n        $.get(templateName, function (data) {\n            try {\n                let Prof = Vue.extend({\n                    template: data,\n                    mounted: function () {\n                        this.init();\n\n                        this.fieldName = fieldName;\n\n                        if(fieldValue) {\n                            this.beginPath(fieldValue);\n                        } else {\n                            this.beginPath();\n                        }\n                    },\n                    data: function () {\n                        return {\n                            pathGenerator: null,\n                            map: null,\n                            currentPath: new Path([]),\n                            renderer: null,\n                            inEdit: true,\n                            fieldName: ''\n                        };\n                    },\n                    computed: {\n                        icons: function () {\n                            return icons;\n                        }\n                    },\n                    methods: {\n                        beginPath: function (data) {\n                            if(this.currentPath) {\n                                this.currentPath.clear();\n                            }\n\n                            this.pathGenerator.defaultIcon = icons[0].icon;\n                            let bounds = this.pathGenerator.start(this.currentPath, data);\n\n                            if(bounds != undefined) {\n                                this.map.map.fitBounds(bounds);\n                                this.map.map.panToBounds(bounds);\n                            }\n                        },\n                        finishPath: function () {\n                            this.pathGenerator.finish();\n                        },\n                        toTop: function (index) {\n                            this.currentPath.indexDispose(index, -1);\n                        },\n                        toDown: function (index) {\n                            this.currentPath.indexDispose(index, 1);\n                        },\n                        remove: function (index) {\n                            this.currentPath.indexRemove(index);\n                        },\n                        center: function (point) {\n                            let latLng = point.latLng;\n\n                            this.map.map.setCenter(latLng);\n                        },\n                        clearPath: function () {\n                            this.currentPath.clear();\n                        },\n                        setAhead: function (point, ahead) {\n                            point.setAhead(ahead);\n                            \n                            this.renderer.render(this.currentPath);\n                        },\n                        init: function () {\n                            let element = this.$el.querySelector('.g-maps');\n\n                            this.map = new GMap(element);\n                            this.pathGenerator = new PathGenerator(this.map);\n                            this.renderer = new Renderer(this.map);\n\n                            this.currentPath.addUpdateListener(function () {\n                                /* rem-block */\n                                console.log('Path updating...');\n                                /* end-rem-block */\n\n                                this.renderer.render(this.currentPath);\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            this.pathGenerator.appendAddListener(function () {\n                                const elemPosition = this.currentPath.size;\n\n                                /* rem-block */\n                                console.log('Adding point...');\n                                /* end-rem-block */\n\n                                setTimeout(function () {\n                                    const selector = 'input[date-time=\"dt-' + (elemPosition - 1) + '\"]';\n                                    const pickerAnchor = $(selector);\n\n                                    pickerAnchor.timepicker({\n                                        showMeridian: false\n                                    }).on('changeTime.timepicker', function (e) {\n                                        const value = e.time.value;\n                                        let index = pickerAnchor.attr('data-index');\n\n                                        this.currentPath.pointValue(index, 'time', value);\n\n                                        /* rem-block */\n                                        console.log('Point added');\n                                        /* end-rem-block */\n                                    }.bind(this));\n                                }.bind(this), 500);\n                            }.bind(this));\n\n                            google.maps.event.addListener(this.map.map, 'click', function(event) {\n                                const markerCoords = event.latLng;\n\n                                this.pathGenerator.add({\n                                    position: markerCoords.toJSON()\n                                });\n\n                                this.$forceUpdate();\n                            }.bind(this));\n                        }\n                    }\n                });\n\n                /* rem-block */\n                console.log('Load component...');\n                /* end-rem-block */\n\n                new Prof().$mount(componentName);\n            } catch (error) {\n                console.log(error);\n                console.log('Не удается определить компонент: Vue.js не инициализирован');\n            }\n        });\n    });\n});","/**\n * Created by joker on 15.12.16.\n */\nexport class MapMarker {\n    get meta() {\n        return this._meta;\n    }\n\n    set meta(value) {\n        this._meta = value;\n    }\n\n    get draggable() {\n        return this._marker.getDraggable();\n    }\n\n    set draggable(value) {\n        this._marker.setDraggable(value);\n    }\n    get icon() {\n        return this._icon;\n    }\n    get time() {\n        return this._time;\n    }\n\n    set time(value) {\n        this._time = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n        this.marker.setMap(value.map);\n    }\n    get latLng() {\n        return this._latLng;\n    }\n\n    set latLng(value) {\n        this._latLng = value;\n\n        this.marker.setPosition(new google.maps.LatLng(value.lat, value.lng));\n    }\n\n    get visible() {\n        return this._marker.getVisible();\n    }\n\n    set visible(value) {\n        this._marker.setVisible(value);\n        this._visible = value;\n    }\n    get description() {\n        return this._description;\n    }\n\n    set icon(path) {\n        this._icon = path;\n    }\n\n    set description(value) {\n        this._description = value;\n\n        if(this._ahead) {\n            this._ahead = false;\n            return;\n        }\n\n        if(this._description != '') {\n            if(dropdownResolver != undefined) {\n                dropdownResolver(value, function (points) {\n                    let typeahead = [];\n                    \n                    for(let index in points) {\n                        let item = {\n                            _meta: {\n                                id: points[index].id\n                            },\n                            name: points[index].name,\n                            lat: points[index].lat,\n                            lng: points[index].lng\n                        };\n\n                        if(points[index].display != undefined) {\n                            item['display'] = points[index].display;\n                        }\n\n                        typeahead.push(item);\n                    }\n\n                    this.typeahead = typeahead;\n                }.bind(this));\n            }\n        } else {\n            this.typeahead = [];\n        }\n    }\n    \n    get label() {\n        return this._label;\n    }\n\n    set label(value) {\n        this._label = value;\n\n        if(this._marker) {\n            this._marker.setLabel(value);\n        }\n    }\n    get marker() {\n        return this._marker;\n    }\n    get template() {\n        return this._template;\n    }\n\n    set template(value) {\n        this._template = value;\n    }\n\n    get serial() {\n        let seria = {\n            description: this.description,\n            position: this.marker.getPosition().toJSON(),\n            visible: this.visible,\n            time: this.time,\n            icon: this.icon,\n            draggable: this.draggable,\n            meta: this.meta\n        };\n\n        return JSON.stringify(seria);\n    }\n    \n    remove() {\n        this.marker.setMap(null);\n    }\n\n    setAhead(ahead) {\n        this._ahead = true;\n\n        this.description = ahead.name;\n\n        const position = {\n            lat: ahead.lat,\n            lng: ahead.lng\n        };\n\n        if(ahead['display'] != undefined) {\n            if(ahead['display']['svg'] != undefined) {\n                this.icon = ahead['display']['svg'];\n            }\n        }\n\n        this.latLng = position;\n        this.meta = ahead._meta;\n\n        this.typeahead = [];\n    }\n\n    set serial(value) {\n        let pos = value.position;\n\n        this.latLng = new google.maps.LatLng(pos);\n\n        this._ahead = true;\n        this.description = value.description || '';\n\n        if(value.label) {\n            this.label = value.label + '';\n        }\n        \n        if(typeof value.visible === 'boolean') {\n            this.visible = value.visible;\n        } else {\n            this.visible = true;\n        }\n\n        this.time = value.time || '0:00';\n        this.icon = value.icon || '';\n        this.meta = value.meta || {};\n\n        this.marker.setPosition(this.latLng);\n        this.marker.setLabel(this.label);\n        this.marker.setVisible(this.visible);\n    }\n\n    constructor(map, coords, template) {\n        if(!map) {\n            throw 'Не определена карта';\n        }\n\n        this._marker = new google.maps.Marker({\n            map: map.map,\n            position: coords,\n            draggable: true\n        });\n        \n        this.map = map;\n\n        if(template) {\n            this.template = template;\n        }\n    }\n\n    _time = '';\n    _map = null;\n    _latLng = {};\n    _description = '';\n    _marker = null;\n    _template = 'content.html';\n    _label = '';\n    _visible = true;\n    _icon = '';\n    typeahead = [];\n    _meta = {};\n\n    getPosition() {\n        return this._marker.getPosition();\n    }\n\n    get coordsStr() {\n        let pos = this.getPosition();\n        return pos.toString();\n    }\n\n    addInfo() {\n        let data = document.createElement('div');\n\n        $(data).load('src/tpl/' + this.template);\n\n        let infowindow = new google.maps.InfoWindow({\n            content: data\n        });\n\n        this._marker.addListener('mouseover', function() {\n            infowindow.open(map, this._marker);\n        });\n\n        this._marker.addListener('mouseout', function() {\n            infowindow.close();\n        });\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport class GMap {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n\n    /**\n     * Ссылка на объект карт\n     */\n    _map;\n\n    constructor(element) {\n        var pointCoords = {\n            lat: 52.61667,\n            lng: 39.6000\n        };\n\n        this._map = new google.maps.Map(element, {\n            center: pointCoords,\n            zoom: 16\n        });\n\n        google.maps.event.trigger(this._map, 'resize');\n    }\n}","import {Path} from \"./path\";\nimport {MapMarker} from \"./map-marker\";\n/**\n * Created by joker on 15.12.16.\n */\n\nexport class PathGenerator {\n    get defaultIcon() {\n        return this._defaultIcon;\n    }\n\n    set defaultIcon(value) {\n        this._defaultIcon = value;\n    }\n    get counter() {\n        return this._counter;\n    }\n\n    set counter(value) {\n        this._counter = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    _map;\n    _path = [];\n    _counter = 1;\n    _addedListeners = [];\n    _defaultIcon = '';\n\n    constructor(map) {\n        if(map) {\n            this.map = map;\n        }\n    }\n\n    /**\n     * Запуск генератора\n     */\n    start(path, data) {\n        this._path = path;\n\n        if(data) {\n            this._path.clear();\n\n            let markersArray = JSON.parse(data);\n\n            let bounds  = new google.maps.LatLngBounds();\n\n            for (let markerJson of markersArray) {\n                this.add(markerJson);\n\n                let pos = markerJson.position;\n\n                bounds.extend(new google.maps.LatLng({\n                    lat: pos.lat,\n                    lng: pos.lng\n                }));\n            }\n            \n            return bounds;\n        }\n        \n        return undefined;\n    }\n\n    finish() {\n        this._path = null;\n    }\n    \n    appendAddListener(handler) {\n        this._addedListeners.push(handler);\n    }\n\n    add(markerJson) {\n        if(this._path) {\n            let marker = new MapMarker(this.map, markerJson.position);\n\n            markerJson.label = this._path.markers.length + 1;\n\n            marker.serial = markerJson;\n\n            if(marker.icon === '') {\n                marker.icon = this.defaultIcon;\n            }\n\n            this._path.add(marker);\n            \n            for(let handler of this._addedListeners) {\n                handler();\n            }\n        }\n    }\n}","/**\n * Created by joker on 15.12.16.\n *\n *\n */\nimport {assert as assert} from './utils';\n\nexport class Path {\n    get markers() {\n        return this._markers;\n    }\n\n    set markers(value) {\n        this._markers = value;\n    }\n        \n    _markers = [];\n    _updateListeners = [];\n\n    /**\n     * Получение сериализованного массива\n     */\n    get serial() {\n        let serias = this._markers.map(function (mark) {\n            return mark.serial;\n        }).join(',');\n\n        let res = '[' + serias + ']';\n        \n        return res;\n    }\n\n    get coordsArray() {\n        let result = this.markers.map(function (coord) {\n            return coord.getPosition();\n        });\n\n        return result;\n    }\n    \n    pointValue(index, field, value) {\n        assert(index > -1 && index < this._markers.length);\n        \n        this._markers[index][field] = value;\n    }\n    \n    get size() {\n        return this._markers.length;\n    }\n\n    /**\n     * Смена позиции индекса\n     * @param index Индекс\n     * @param crem Смещение\n     */\n    indexDispose(index, crem) {\n        let s = index + crem;\n\n        assert(index > -1 && index < this._markers.length);\n        assert(s > -1 && s < this._markers.length);\n\n        let elem = this._markers[s];\n\n        this._markers[s] = this._markers[index];\n        this._markers[index] = elem;\n\n        this.callUpdateHandlers();\n    }\n\n    indexRemove(index) {\n        assert(index > -1 && index < this._markers.length);\n\n        let elem = this._markers[index];\n        elem.marker.setMap(null);\n\n        this._markers.splice(index, 1);\n\n        this.callUpdateHandlers();\n    }\n\n    get coordsStr() {\n        let res = '';\n        \n        for(let mark of this._markers) {\n            res += mark.coordsStr;\n        }\n\n        return res;\n    }\n    \n    addUpdateListener(handler) {\n        this._updateListeners.push(handler);\n    }\n\n    clear() {\n        for(let mark of this.markers) {\n            mark.marker.setMap(null);\n        }\n\n        this.markers = [];\n        \n        this.callUpdateHandlers();\n    }\n\n    callUpdateHandlers() {\n        for(let handler of this._updateListeners) {\n            handler();\n        }\n    }\n\n    add(marker) {\n        this.markers.push(marker);\n        marker.marker.addListener('dragend', function () {\n            this.callUpdateHandlers();\n        }.bind(this));\n\n        if(this.markers.length > 1) {\n            this.callUpdateHandlers();\n        }\n    }\n\n    refreshLabels() {\n        let index = 1;\n        for(let mark of this.markers) {\n            if(mark.visible) {\n                mark.label = index + '';\n                index += 1;\n            }\n        }\n    }\n\n    constructor(markers) {\n        this.markers = markers;\n\n        this.addUpdateListener(function () {\n            this.refreshLabels();\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport default class Renderer {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    \n    _map = null;\n    \n    \n    constructor(map) {\n        this._directionsService = new google.maps.DirectionsService();\n        this._directionsDisplay = new google.maps.DirectionsRenderer();\n        \n        this.map = map;\n    }\n\n    waypoints(coords) {\n        let result = [];\n\n        for(let i = 1; i < coords.length - 1; ++i) {\n            result.push({\n                location: coords[i],\n                stopover: false\n            });\n        }\n\n        return result;\n    }\n\n    render(path) {\n        let coords = path.coordsArray;\n\n        if(coords.length < 2) {\n            this._directionsDisplay.setMap(null);\n            return;\n        }\n\n        this._directionsDisplay.setMap(this.map.map);\n\n        let waypoints = this.waypoints(coords);\n\n        let request = {\n            origin: coords[0],\n            waypoints,\n            destination: coords[coords.length - 1],\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n\n        this._directionsService.route(request, function(response, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                this._directionsDisplay.setDirections(response);\n            }\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport function assert(condition, message) {\n    if (!condition) {\n        throw message || \"Assertion failed\";\n    }\n}"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}