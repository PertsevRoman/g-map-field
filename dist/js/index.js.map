{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/lib/map-marker.js","src/js/lib/map.js","src/js/lib/path-generator.js","src/js/lib/path.js","src/js/lib/renderer.js","src/js/lib/utils.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by joker on 13.12.16.\n *\n * Получение данных\n */\n\nimport {PathGenerator} from \"./lib/path-generator\";\nimport {GMap} from \"./lib/map\";\nimport Renderer from \"./lib/renderer\";\nimport {Path} from \"./lib/path\";\n\nconst componentName = 'path-input';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let componentAnchor = document.getElementsByTagName(componentName)[0];\n\n    if(componentAnchor == null) {\n        console.log('Component tag not founded');\n        return;\n    }\n    \n    let templateName = componentAnchor.getAttribute('template');\n    let fieldValue = componentAnchor.getAttribute('field-value');\n    let fieldName = componentAnchor.getAttribute('field-name');\n    let iconsResource = componentAnchor.getAttribute('icons-resource');\n\n    $.get(iconsResource, function (icons) {\n        $.get(templateName, function (data) {\n            try {\n                let Prof = Vue.extend({\n                    template: data,\n                    mounted: function () {\n                        this.init();\n\n                        this.fieldName = fieldName;\n\n                        if(fieldValue) {\n                            this.beginPath(fieldValue);\n                        } else {\n                            this.beginPath();\n                        }\n                    },\n                    data: function () {\n                        return {\n                            pathGenerator: null,\n                            map: null,\n                            currentPath: new Path([]),\n                            renderer: null,\n                            inEdit: true,\n                            fieldName: ''\n                        };\n                    },\n                    computed: {\n                        icons: function () {\n                            return icons;\n                        }\n                    },\n                    methods: {\n                        fitContainer: function () {\n                            let bounds = this.currentPath.bounds;\n\n                            this.map.map.fitBounds(bounds);\n                            this.map.map.panToBounds(bounds);\n                        },\n                        beginPath: function (data) {\n                            if(this.currentPath) {\n                                this.currentPath.clear();\n                            }\n\n                            this.pathGenerator.defaultIcon = icons[0].icon;\n                            this.pathGenerator.start(this.currentPath, data);\n                        },\n                        finishPath: function () {\n                            this.pathGenerator.finish();\n                        },\n                        toTop: function (index) {\n                            this.currentPath.indexDispose(index, -1);\n                        },\n                        toDown: function (index) {\n                            this.currentPath.indexDispose(index, 1);\n                        },\n                        remove: function (index) {\n                            this.currentPath.indexRemove(index);\n                        },\n                        center: function (point) {\n                            let latLng = point.latLng;\n\n                            this.map.map.setCenter(latLng);\n                        },\n                        clearPath: function () {\n                            this.currentPath.clear();\n                        },\n                        setAhead: function (point, ahead) {\n                            point.setAhead(ahead);\n                            \n                            this.renderer.render(this.currentPath);\n                        },\n                        init: function () {\n                            let element = this.$el.querySelector('.g-maps');\n\n                            this.map = new GMap(element);\n                            this.pathGenerator = new PathGenerator(this.map);\n                            this.renderer = new Renderer(this.map);\n\n                            this.currentPath.addUpdateListener(function () {\n                                /* rem-block */\n                                console.log('Path updating...');\n                                /* end-rem-block */\n\n                                this.renderer.render(this.currentPath);\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            this.pathGenerator.appendAddListener(function () {\n                                const elemPosition = this.currentPath.size;\n\n                                /* rem-block */\n                                console.log('Adding point...');\n                                /* end-rem-block */\n\n                                setTimeout(function () {\n                                    const selector = 'input[date-time=\"dt-' + (elemPosition - 1) + '\"]';\n                                    const pickerAnchor = $(selector);\n\n                                    pickerAnchor.timepicker({\n                                        showMeridian: false\n                                    }).on('changeTime.timepicker', function (e) {\n                                        const value = e.time.value;\n                                        let index = pickerAnchor.attr('data-index');\n\n                                        this.currentPath.pointValue(index, 'time', value);\n\n                                        /* rem-block */\n                                        console.log('Point added');\n                                        /* end-rem-block */\n                                    }.bind(this));\n                                }.bind(this), 500);\n                            }.bind(this));\n\n                            google.maps.event.addListener(this.map.map, 'click', function(event) {\n                                const markerCoords = event.latLng;\n\n                                this.pathGenerator.add({\n                                    position: markerCoords.toJSON()\n                                });\n\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            window.addEventListener('resize', function () {\n                                this.fitContainer();\n                            }.bind(this));\n                        }\n                    }\n                });\n\n                /* rem-block */\n                console.log('Load component...');\n                /* end-rem-block */\n\n                new Prof().$mount(componentName);\n            } catch (error) {\n                console.log(error);\n                console.log('Не удается определить компонент: Vue.js не инициализирован');\n            }\n        });\n    });\n});","/**\n * Created by joker on 15.12.16.\n */\nexport class MapMarker {\n    get meta() {\n        return this._meta;\n    }\n\n    set meta(value) {\n        this._meta = value;\n    }\n\n    get draggable() {\n        return this._marker.getDraggable();\n    }\n\n    set draggable(value) {\n        this._marker.setDraggable(value);\n    }\n    get icon() {\n        return this._icon;\n    }\n    get time() {\n        return this._time;\n    }\n\n    set time(value) {\n        this._time = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n        this.marker.setMap(value.map);\n    }\n    get latLng() {\n        return this._latLng;\n    }\n\n    set latLng(value) {\n        this._latLng = value;\n\n        this.marker.setPosition(new google.maps.LatLng(value.lat, value.lng));\n    }\n\n    get visible() {\n        return this._marker.getVisible();\n    }\n\n    set visible(value) {\n        this._marker.setVisible(value);\n        this._visible = value;\n    }\n    get description() {\n        return this._description;\n    }\n\n    set icon(path) {\n        this._icon = path;\n    }\n\n    set description(value) {\n        this._description = value;\n\n        if(this._ahead) {\n            this._ahead = false;\n            return;\n        }\n\n        if(this._description != '') {\n            if(dropdownResolver != undefined) {\n                dropdownResolver(value, function (points) {\n                    let typeahead = [];\n                    \n                    for(let index in points) {\n                        let item = {\n                            _meta: {\n                                id: points[index].id\n                            },\n                            name: points[index].name,\n                            lat: points[index].lat,\n                            lng: points[index].lng\n                        };\n\n                        if(points[index].display != undefined) {\n                            item['display'] = points[index].display;\n                        }\n\n                        typeahead.push(item);\n                    }\n\n                    this.typeahead = typeahead;\n                }.bind(this));\n            }\n        } else {\n            this.typeahead = [];\n        }\n    }\n    \n    get label() {\n        return this._label;\n    }\n\n    set label(value) {\n        this._label = value;\n\n        if(this._marker) {\n            this._marker.setLabel(value);\n        }\n    }\n    get marker() {\n        return this._marker;\n    }\n    get template() {\n        return this._template;\n    }\n\n    set template(value) {\n        this._template = value;\n    }\n\n    get serial() {\n        let seria = {\n            description: this.description,\n            position: this.marker.getPosition().toJSON(),\n            visible: this.visible,\n            time: this.time,\n            icon: this.icon,\n            draggable: this.draggable,\n            meta: this.meta\n        };\n\n        return JSON.stringify(seria);\n    }\n    \n    remove() {\n        this.marker.setMap(null);\n    }\n\n    setAhead(ahead) {\n        this._ahead = true;\n\n        this.description = ahead.name;\n\n        const position = {\n            lat: ahead.lat,\n            lng: ahead.lng\n        };\n\n        if(ahead['display'] != undefined) {\n            if(ahead['display']['svg'] != undefined) {\n                this.icon = ahead['display']['svg'];\n            }\n        }\n\n        this.latLng = position;\n        this.meta = ahead._meta;\n\n        this.typeahead = [];\n    }\n\n    set serial(value) {\n        let pos = value.position;\n\n        this.latLng = new google.maps.LatLng(pos);\n\n        this._ahead = true;\n        this.description = value.description || '';\n\n        if(value.label) {\n            this.label = value.label + '';\n        }\n        \n        if(typeof value.visible === 'boolean') {\n            this.visible = value.visible;\n        } else {\n            this.visible = true;\n        }\n\n        this.time = value.time || '0:00';\n        this.icon = value.icon || '';\n        this.meta = value.meta || {};\n\n        this.marker.setPosition(this.latLng);\n        this.marker.setLabel(this.label);\n        this.marker.setVisible(this.visible);\n    }\n\n    constructor(map, coords, template) {\n        if(!map) {\n            throw 'Не определена карта';\n        }\n\n        this._marker = new google.maps.Marker({\n            map: map.map,\n            position: coords,\n            draggable: true\n        });\n        \n        this.map = map;\n\n        if(template) {\n            this.template = template;\n        }\n    }\n\n    _time = '';\n    _map = null;\n    _latLng = {};\n    _description = '';\n    _marker = null;\n    _template = 'content.html';\n    _label = '';\n    _visible = true;\n    _icon = '';\n    typeahead = [];\n    _meta = {};\n\n    getPosition() {\n        return this._marker.getPosition();\n    }\n\n    get coordsStr() {\n        let pos = this.getPosition();\n        return pos.toString();\n    }\n\n    addInfo() {\n        let data = document.createElement('div');\n\n        $(data).load('src/tpl/' + this.template);\n\n        let infowindow = new google.maps.InfoWindow({\n            content: data\n        });\n\n        this._marker.addListener('mouseover', function() {\n            infowindow.open(map, this._marker);\n        });\n\n        this._marker.addListener('mouseout', function() {\n            infowindow.close();\n        });\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport class GMap {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n\n    /**\n     * Ссылка на объект карт\n     */\n    _map;\n\n    constructor(element) {\n        var pointCoords = {\n            lat: 52.61667,\n            lng: 39.6000\n        };\n\n        this._map = new google.maps.Map(element, {\n            center: pointCoords,\n            zoom: 16\n        });\n\n        google.maps.event.trigger(this._map, 'resize');\n    }\n}","import {Path} from \"./path\";\nimport {MapMarker} from \"./map-marker\";\n/**\n * Created by joker on 15.12.16.\n */\n\nexport class PathGenerator {\n    get defaultIcon() {\n        return this._defaultIcon;\n    }\n\n    set defaultIcon(value) {\n        this._defaultIcon = value;\n    }\n    get counter() {\n        return this._counter;\n    }\n\n    set counter(value) {\n        this._counter = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    _map;\n    _path = [];\n    _counter = 1;\n    _addedListeners = [];\n    _defaultIcon = '';\n\n    constructor(map) {\n        if(map) {\n            this.map = map;\n        }\n    }\n\n    /**\n     * Запуск генератора\n     */\n    start(path, data) {\n        this._path = path;\n\n        if(data) {\n            this._path.clear();\n\n            let markersArray = JSON.parse(data);\n\n            for (let markerJson of markersArray) {\n                this.add(markerJson);\n            }\n        }\n    }\n\n    finish() {\n        this._path = null;\n    }\n    \n    appendAddListener(handler) {\n        this._addedListeners.push(handler);\n    }\n\n    add(markerJson) {\n        if(this._path) {\n            let marker = new MapMarker(this.map, markerJson.position);\n\n            markerJson.label = this._path.markers.length + 1;\n\n            marker.serial = markerJson;\n\n            if(marker.icon === '') {\n                marker.icon = this.defaultIcon;\n            }\n\n            this._path.add(marker);\n            \n            for(let handler of this._addedListeners) {\n                handler();\n            }\n        }\n    }\n}","/**\n * Created by joker on 15.12.16.\n *\n *\n */\nimport {assert as assert} from './utils';\n\nexport class Path {\n    get markers() {\n        return this._markers;\n    }\n\n    set markers(value) {\n        this._markers = value;\n    }\n        \n    _markers = [];\n    _updateListeners = [];\n\n    /**\n     * Получение сериализованного массива\n     */\n    get serial() {\n        let serias = this._markers.map(function (mark) {\n            return mark.serial;\n        }).join(',');\n\n        let res = '[' + serias + ']';\n        \n        return res;\n    }\n\n    get coordsArray() {\n        let result = this.markers.map(function (coord) {\n            return coord.getPosition();\n        });\n\n        return result;\n    }\n    \n    pointValue(index, field, value) {\n        assert(index > -1 && index < this._markers.length);\n        \n        this._markers[index][field] = value;\n    }\n    \n    get size() {\n        return this._markers.length;\n    }\n\n    /**\n     * Смена позиции индекса\n     * @param index Индекс\n     * @param crem Смещение\n     */\n    indexDispose(index, crem) {\n        let s = index + crem;\n\n        assert(index > -1 && index < this._markers.length);\n        assert(s > -1 && s < this._markers.length);\n\n        let elem = this._markers[s];\n\n        this._markers[s] = this._markers[index];\n        this._markers[index] = elem;\n\n        this.callUpdateHandlers();\n    }\n\n    indexRemove(index) {\n        assert(index > -1 && index < this._markers.length);\n\n        let elem = this._markers[index];\n        elem.marker.setMap(null);\n\n        this._markers.splice(index, 1);\n\n        this.callUpdateHandlers();\n    }\n\n    get bounds() {\n        let bounds  = new google.maps.LatLngBounds();\n        \n        for(let marker of this._markers) {\n            let latLng = marker.getPosition();\n            \n            bounds.extend(latLng);\n        }\n        \n        return bounds;\n    }\n\n    get coordsStr() {\n        let res = '';\n        \n        for(let mark of this._markers) {\n            res += mark.coordsStr;\n        }\n\n        return res;\n    }\n    \n    addUpdateListener(handler) {\n        this._updateListeners.push(handler);\n    }\n\n    clear() {\n        for(let mark of this.markers) {\n            mark.marker.setMap(null);\n        }\n\n        this.markers = [];\n        \n        this.callUpdateHandlers();\n    }\n\n    callUpdateHandlers() {\n        for(let handler of this._updateListeners) {\n            handler();\n        }\n    }\n\n    add(marker) {\n        this.markers.push(marker);\n        marker.marker.addListener('dragend', function () {\n            this.callUpdateHandlers();\n        }.bind(this));\n\n        if(this.markers.length > 1) {\n            this.callUpdateHandlers();\n        }\n    }\n\n    refreshLabels() {\n        let index = 1;\n        for(let mark of this.markers) {\n            if(mark.visible) {\n                mark.label = index + '';\n                index += 1;\n            }\n        }\n    }\n\n    constructor(markers) {\n        this.markers = markers;\n\n        this.addUpdateListener(function () {\n            this.refreshLabels();\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport default class Renderer {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    \n    _map = null;\n    \n    \n    constructor(map) {\n        this._directionsService = new google.maps.DirectionsService();\n        this._directionsDisplay = new google.maps.DirectionsRenderer();\n        \n        this.map = map;\n    }\n\n    waypoints(coords) {\n        let result = [];\n\n        for(let i = 1; i < coords.length - 1; ++i) {\n            result.push({\n                location: coords[i],\n                stopover: false\n            });\n        }\n\n        return result;\n    }\n\n    render(path) {\n        let coords = path.coordsArray;\n\n        if(coords.length < 2) {\n            this._directionsDisplay.setMap(null);\n            return;\n        }\n\n        this._directionsDisplay.setMap(this.map.map);\n\n        let waypoints = this.waypoints(coords);\n\n        let request = {\n            origin: coords[0],\n            waypoints,\n            destination: coords[coords.length - 1],\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n\n        this._directionsService.route(request, function(response, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                this._directionsDisplay.setDirections(response);\n            }\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport function assert(condition, message) {\n    if (!condition) {\n        throw message || \"Assertion failed\";\n    }\n}"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvaW5kZXguanMiLCJzcmMvanMvbGliL21hcC1tYXJrZXIuanMiLCJzcmMvanMvbGliL21hcC5qcyIsInNyYy9qcy9saWIvcGF0aC1nZW5lcmF0b3IuanMiLCJzcmMvanMvbGliL3BhdGguanMiLCJzcmMvanMvbGliL3JlbmRlcmVyLmpzIiwic3JjL2pzL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDTUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQVRBOzs7Ozs7QUFXQSxJQUFNLGdCQUFnQixZQUF0Qjs7QUFFQSxTQUFTLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFZO0FBQ3RELFFBQUksa0JBQWtCLFNBQVMsb0JBQVQsQ0FBOEIsYUFBOUIsRUFBNkMsQ0FBN0MsQ0FBdEI7O0FBRUEsUUFBRyxtQkFBbUIsSUFBdEIsRUFBNEI7QUFDeEIsZ0JBQVEsR0FBUixDQUFZLDJCQUFaO0FBQ0E7QUFDSDs7QUFFRCxRQUFJLGVBQWUsZ0JBQWdCLFlBQWhCLENBQTZCLFVBQTdCLENBQW5CO0FBQ0EsUUFBSSxhQUFhLGdCQUFnQixZQUFoQixDQUE2QixhQUE3QixDQUFqQjtBQUNBLFFBQUksWUFBWSxnQkFBZ0IsWUFBaEIsQ0FBNkIsWUFBN0IsQ0FBaEI7QUFDQSxRQUFJLGdCQUFnQixnQkFBZ0IsWUFBaEIsQ0FBNkIsZ0JBQTdCLENBQXBCOztBQUVBLE1BQUUsR0FBRixDQUFNLGFBQU4sRUFBcUIsVUFBVSxNQUFWLEVBQWlCO0FBQ2xDLFVBQUUsR0FBRixDQUFNLFlBQU4sRUFBb0IsVUFBVSxJQUFWLEVBQWdCO0FBQ2hDLGdCQUFJO0FBQ0Esb0JBQUksT0FBTyxJQUFJLE1BQUosQ0FBVztBQUNsQiw4QkFBVSxJQURRO0FBRWxCLDZCQUFTLG1CQUFZO0FBQ2pCLDZCQUFLLElBQUw7O0FBRUEsNkJBQUssU0FBTCxHQUFpQixTQUFqQjs7QUFF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QkFBSyxrQkFBTCxDQUF3QixNQUF4QixDQUErQixLQUFLLEdBQUwsQ0FBUyxHQUF4Qzs7QUFFQSxnQkFBSSxZQUFZLEtBQUssU0FBTCxDQUFlLE1BQWYsQ0FBaEI7O0FBRUEsZ0JBQUksVUFBVTtBQUNWLHdCQUFRLE9BQU8sQ0FBUCxDQURFO0FBRVYsb0NBRlU7QUFHViw2QkFBYSxPQUFPLE9BQU8sTUFBUCxHQUFnQixDQUF2QixDQUhIO0FBSVYsNEJBQVksT0FBTyxJQUFQLENBQVksVUFBWixDQUF1QjtBQUp6QixhQUFkOztBQU9BLGlCQUFLLGtCQUFMLENBQXdCLEtBQXhCLENBQThCLE9BQTlCLEVBQXVDLFVBQVMsUUFBVCxFQUFtQixNQUFuQixFQUEyQjtBQUM5RCxvQkFBSSxVQUFVLE9BQU8sSUFBUCxDQUFZLGdCQUFaLENBQTZCLEVBQTNDLEVBQStDO0FBQzNDLHlCQUFLLGtCQUFMLENBQXdCLGFBQXhCLENBQXNDLFFBQXRDO0FBQ0g7QUFDSixhQUpzQyxDQUlyQyxJQUpxQyxDQUloQyxJQUpnQyxDQUF2QztBQUtIOzs7Ozs7a0JBeERnQixROzs7Ozs7OztRQ0FMLE0sR0FBQSxNO0FBSmhCOzs7O0FBSU8sU0FBUyxNQUFULENBQWdCLFNBQWhCLEVBQTJCLE9BQTNCLEVBQW9DO0FBQ3ZDLFFBQUksQ0FBQyxTQUFMLEVBQWdCO0FBQ1osY0FBTSxXQUFXLGtCQUFqQjtBQUNIO0FBQ0oiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGpva2VyIG9uIDEzLjEyLjE2LlxuICpcbiAqINCf0L7Qu9GD0YfQtdC90LjQtSDQtNCw0L3QvdGL0YVcbiAqL1xuXG5pbXBvcnQge1BhdGhHZW5lcmF0b3J9IGZyb20gXCIuL2xpYi9wYXRoLWdlbmVyYXRvclwiO1xuaW1wb3J0IHtHTWFwfSBmcm9tIFwiLi9saWIvbWFwXCI7XG5pbXBvcnQgUmVuZGVyZXIgZnJvbSBcIi4vbGliL3JlbmRlcmVyXCI7XG5pbXBvcnQge1BhdGh9IGZyb20gXCIuL2xpYi9wYXRoXCI7XG5cbmNvbnN0IGNvbXBvbmVudE5hbWUgPSAncGF0aC1pbnB1dCc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvbXBvbmVudEFuY2hvciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKGNvbXBvbmVudE5hbWUpWzBdO1xuXG4gICAgaWYoY29tcG9uZW50QW5jaG9yID09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbXBvbmVudCB0YWcgbm90IGZvdW5kZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBsZXQgdGVtcGxhdGVOYW1lID0gY29tcG9uZW50QW5jaG9yLmdldEF0dHJpYnV0ZSgndGVtcGxhdGUnKTtcbiAgICBsZXQgZmllbGRWYWx1ZSA9IGNvbXBvbmVudEFuY2hvci5nZXRBdHRyaWJ1dGUoJ2ZpZWxkLXZhbHVlJyk7XG4gICAgbGV0IGZpZWxkTmFtZSA9IGNvbXBvbmVudEFuY2hvci5nZXRBdHRyaWJ1dGUoJ2ZpZWxkLW5hbWUnKTtcbiAgICBsZXQgaWNvbnNSZXNvdXJjZSA9IGNvbXBvbmVudEFuY2hvci5nZXRBdHRyaWJ1dGUoJ2ljb25zLXJlc291cmNlJyk7XG5cbiAgICAkLmdldChpY29uc1Jlc291cmNlLCBmdW5jdGlvbiAoaWNvbnMpIHtcbiAgICAgICAgJC5nZXQodGVtcGxhdGVOYW1lLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgUHJvZiA9IFZ1ZS5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGROYW1lID0gZmllbGROYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihmaWVsZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpblBhdGgoZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aEdlbmVyYXRvcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IG5ldyBQYXRoKFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkVkaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGljb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXRDb250YWluZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm91bmRzID0gdGhpcy5jdXJyZW50UGF0aC5ib3VuZHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5tYXAuZml0Qm91bmRzKGJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAubWFwLnBhblRvQm91bmRzKGJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5QYXRoOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aC5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci5kZWZhdWx0SWNvbiA9IGljb25zWzBdLmljb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoR2VuZXJhdG9yLnN0YXJ0KHRoaXMuY3VycmVudFBhdGgsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaFBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9Ub3A6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGguaW5kZXhEaXNwb3NlKGluZGV4LCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9Eb3duOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYXRoLmluZGV4RGlzcG9zZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYXRoLmluZGV4UmVtb3ZlKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYXRMbmcgPSBwb2ludC5sYXRMbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5tYXAuc2V0Q2VudGVyKGxhdExuZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJQYXRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aC5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEFoZWFkOiBmdW5jdGlvbiAocG9pbnQsIGFoZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQuc2V0QWhlYWQoYWhlYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuY3VycmVudFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJy5nLW1hcHMnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFwID0gbmV3IEdNYXAoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoR2VuZXJhdG9yID0gbmV3IFBhdGhHZW5lcmF0b3IodGhpcy5tYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIodGhpcy5tYXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aC5hZGRVcGRhdGVMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHJlbS1ibG9jayAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUGF0aCB1cGRhdGluZy4uLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtcmVtLWJsb2NrICovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5jdXJyZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGF0aEdlbmVyYXRvci5hcHBlbmRBZGRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1Qb3NpdGlvbiA9IHRoaXMuY3VycmVudFBhdGguc2l6ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiByZW0tYmxvY2sgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FkZGluZyBwb2ludC4uLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtcmVtLWJsb2NrICovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9ICdpbnB1dFtkYXRlLXRpbWU9XCJkdC0nICsgKGVsZW1Qb3NpdGlvbiAtIDEpICsgJ1wiXSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWNrZXJBbmNob3IgPSAkKHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGlja2VyQW5jaG9yLnRpbWVwaWNrZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dNZXJpZGlhbjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9uKCdjaGFuZ2VUaW1lLnRpbWVwaWNrZXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZS50aW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHBpY2tlckFuY2hvci5hdHRyKCdkYXRhLWluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYXRoLnBvaW50VmFsdWUoaW5kZXgsICd0aW1lJywgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcmVtLWJsb2NrICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvaW50IGFkZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZW5kLXJlbS1ibG9jayAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCA1MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcih0aGlzLm1hcC5tYXAsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlckNvb3JkcyA9IGV2ZW50LmxhdExuZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdGhHZW5lcmF0b3IuYWRkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBtYXJrZXJDb29yZHMudG9KU09OKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXRDb250YWluZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiByZW0tYmxvY2sgKi9cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBjb21wb25lbnQuLi4nKTtcbiAgICAgICAgICAgICAgICAvKiBlbmQtcmVtLWJsb2NrICovXG5cbiAgICAgICAgICAgICAgICBuZXcgUHJvZigpLiRtb3VudChjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQndC1INGD0LTQsNC10YLRgdGPINC+0L/RgNC10LTQtdC70LjRgtGMINC60L7QvNC/0L7QvdC10L3RgjogVnVlLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGpva2VyIG9uIDE1LjEyLjE2LlxuICovXG5leHBvcnQgY2xhc3MgTWFwTWFya2VyIHtcbiAgICBnZXQgbWV0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGE7XG4gICAgfVxuXG4gICAgc2V0IG1ldGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWV0YSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBkcmFnZ2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJrZXIuZ2V0RHJhZ2dhYmxlKCk7XG4gICAgfVxuXG4gICAgc2V0IGRyYWdnYWJsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXJrZXIuc2V0RHJhZ2dhYmxlKHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IGljb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pY29uO1xuICAgIH1cbiAgICBnZXQgdGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgc2V0IHRpbWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGltZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xuICAgIH1cblxuICAgIHNldCBtYXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFwID0gdmFsdWU7XG4gICAgICAgIHRoaXMubWFya2VyLnNldE1hcCh2YWx1ZS5tYXApO1xuICAgIH1cbiAgICBnZXQgbGF0TG5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF0TG5nO1xuICAgIH1cblxuICAgIHNldCBsYXRMbmcodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbGF0TG5nID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5tYXJrZXIuc2V0UG9zaXRpb24obmV3IGdvb2dsZS5tYXBzLkxhdExuZyh2YWx1ZS5sYXQsIHZhbHVlLmxuZykpO1xuICAgIH1cblxuICAgIGdldCB2aXNpYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFya2VyLmdldFZpc2libGUoKTtcbiAgICB9XG5cbiAgICBzZXQgdmlzaWJsZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXJrZXIuc2V0VmlzaWJsZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfVxuXG4gICAgc2V0IGljb24ocGF0aCkge1xuICAgICAgICB0aGlzLl9pY29uID0gcGF0aDtcbiAgICB9XG5cbiAgICBzZXQgZGVzY3JpcHRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSB2YWx1ZTtcblxuICAgICAgICBpZih0aGlzLl9haGVhZCkge1xuICAgICAgICAgICAgdGhpcy5fYWhlYWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuX2Rlc2NyaXB0aW9uICE9ICcnKSB7XG4gICAgICAgICAgICBpZihkcm9wZG93blJlc29sdmVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duUmVzb2x2ZXIodmFsdWUsIGZ1bmN0aW9uIChwb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVhaGVhZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCBpbiBwb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9tZXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBwb2ludHNbaW5kZXhdLmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwb2ludHNbaW5kZXhdLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBwb2ludHNbaW5kZXhdLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHBvaW50c1tpbmRleF0ubG5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwb2ludHNbaW5kZXhdLmRpc3BsYXkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVsnZGlzcGxheSddID0gcG9pbnRzW2luZGV4XS5kaXNwbGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlYWhlYWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZWFoZWFkID0gdHlwZWFoZWFkO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR5cGVhaGVhZCA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGdldCBsYWJlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsO1xuICAgIH1cblxuICAgIHNldCBsYWJlbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xuXG4gICAgICAgIGlmKHRoaXMuX21hcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fbWFya2VyLnNldExhYmVsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWFya2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFya2VyO1xuICAgIH1cbiAgICBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBzZXQgdGVtcGxhdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGVtcGxhdGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgc2VyaWFsKCkge1xuICAgICAgICBsZXQgc2VyaWEgPSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLm1hcmtlci5nZXRQb3NpdGlvbigpLnRvSlNPTigpLFxuICAgICAgICAgICAgdmlzaWJsZTogdGhpcy52aXNpYmxlLFxuICAgICAgICAgICAgdGltZTogdGhpcy50aW1lLFxuICAgICAgICAgICAgaWNvbjogdGhpcy5pY29uLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0aGlzLmRyYWdnYWJsZSxcbiAgICAgICAgICAgIG1ldGE6IHRoaXMubWV0YVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzZXJpYSk7XG4gICAgfVxuICAgIFxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5tYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgIH1cblxuICAgIHNldEFoZWFkKGFoZWFkKSB7XG4gICAgICAgIHRoaXMuX2FoZWFkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gYWhlYWQubmFtZTtcblxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgICAgICAgIGxhdDogYWhlYWQubGF0LFxuICAgICAgICAgICAgbG5nOiBhaGVhZC5sbmdcbiAgICAgICAgfTtcblxuICAgICAgICBpZihhaGVhZFsnZGlzcGxheSddICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYoYWhlYWRbJ2Rpc3BsYXknXVsnc3ZnJ10gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uID0gYWhlYWRbJ2Rpc3BsYXknXVsnc3ZnJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhdExuZyA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLm1ldGEgPSBhaGVhZC5fbWV0YTtcblxuICAgICAgICB0aGlzLnR5cGVhaGVhZCA9IFtdO1xuICAgIH1cblxuICAgIHNldCBzZXJpYWwodmFsdWUpIHtcbiAgICAgICAgbGV0IHBvcyA9IHZhbHVlLnBvc2l0aW9uO1xuXG4gICAgICAgIHRoaXMubGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhwb3MpO1xuXG4gICAgICAgIHRoaXMuX2FoZWFkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHZhbHVlLmRlc2NyaXB0aW9uIHx8ICcnO1xuXG4gICAgICAgIGlmKHZhbHVlLmxhYmVsKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gdmFsdWUubGFiZWwgKyAnJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYodHlwZW9mIHZhbHVlLnZpc2libGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gdmFsdWUudmlzaWJsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpbWUgPSB2YWx1ZS50aW1lIHx8ICcwOjAwJztcbiAgICAgICAgdGhpcy5pY29uID0gdmFsdWUuaWNvbiB8fCAnJztcbiAgICAgICAgdGhpcy5tZXRhID0gdmFsdWUubWV0YSB8fCB7fTtcblxuICAgICAgICB0aGlzLm1hcmtlci5zZXRQb3NpdGlvbih0aGlzLmxhdExuZyk7XG4gICAgICAgIHRoaXMubWFya2VyLnNldExhYmVsKHRoaXMubGFiZWwpO1xuICAgICAgICB0aGlzLm1hcmtlci5zZXRWaXNpYmxlKHRoaXMudmlzaWJsZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IobWFwLCBjb29yZHMsIHRlbXBsYXRlKSB7XG4gICAgICAgIGlmKCFtYXApIHtcbiAgICAgICAgICAgIHRocm93ICfQndC1INC+0L/RgNC10LTQtdC70LXQvdCwINC60LDRgNGC0LAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICBtYXA6IG1hcC5tYXAsXG4gICAgICAgICAgICBwb3NpdGlvbjogY29vcmRzLFxuICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG5cbiAgICAgICAgaWYodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90aW1lID0gJyc7XG4gICAgX21hcCA9IG51bGw7XG4gICAgX2xhdExuZyA9IHt9O1xuICAgIF9kZXNjcmlwdGlvbiA9ICcnO1xuICAgIF9tYXJrZXIgPSBudWxsO1xuICAgIF90ZW1wbGF0ZSA9ICdjb250ZW50Lmh0bWwnO1xuICAgIF9sYWJlbCA9ICcnO1xuICAgIF92aXNpYmxlID0gdHJ1ZTtcbiAgICBfaWNvbiA9ICcnO1xuICAgIHR5cGVhaGVhZCA9IFtdO1xuICAgIF9tZXRhID0ge307XG5cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcmtlci5nZXRQb3NpdGlvbigpO1xuICAgIH1cblxuICAgIGdldCBjb29yZHNTdHIoKSB7XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBwb3MudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBhZGRJbmZvKCkge1xuICAgICAgICBsZXQgZGF0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgICQoZGF0YSkubG9hZCgnc3JjL3RwbC8nICsgdGhpcy50ZW1wbGF0ZSk7XG5cbiAgICAgICAgbGV0IGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICBjb250ZW50OiBkYXRhXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX21hcmtlci5hZGRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCB0aGlzLl9tYXJrZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9tYXJrZXIuYWRkTGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbmZvd2luZG93LmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkgam9rZXIgb24gMTUuMTIuMTYuXG4gKi9cblxuZXhwb3J0IGNsYXNzIEdNYXAge1xuICAgIGdldCBtYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXA7XG4gICAgfVxuXG4gICAgc2V0IG1hcCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXAgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQodGB0YvQu9C60LAg0L3QsCDQvtCx0YrQtdC60YIg0LrQsNGA0YJcbiAgICAgKi9cbiAgICBfbWFwO1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICB2YXIgcG9pbnRDb29yZHMgPSB7XG4gICAgICAgICAgICBsYXQ6IDUyLjYxNjY3LFxuICAgICAgICAgICAgbG5nOiAzOS42MDAwXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChlbGVtZW50LCB7XG4gICAgICAgICAgICBjZW50ZXI6IHBvaW50Q29vcmRzLFxuICAgICAgICAgICAgem9vbTogMTZcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLl9tYXAsICdyZXNpemUnKTtcbiAgICB9XG59IiwiaW1wb3J0IHtQYXRofSBmcm9tIFwiLi9wYXRoXCI7XG5pbXBvcnQge01hcE1hcmtlcn0gZnJvbSBcIi4vbWFwLW1hcmtlclwiO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IGpva2VyIG9uIDE1LjEyLjE2LlxuICovXG5cbmV4cG9ydCBjbGFzcyBQYXRoR2VuZXJhdG9yIHtcbiAgICBnZXQgZGVmYXVsdEljb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0SWNvbjtcbiAgICB9XG5cbiAgICBzZXQgZGVmYXVsdEljb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdEljb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNvdW50ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3VudGVyO1xuICAgIH1cblxuICAgIHNldCBjb3VudGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcDtcbiAgICB9XG5cbiAgICBzZXQgbWFwKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IHZhbHVlO1xuICAgIH1cbiAgICBfbWFwO1xuICAgIF9wYXRoID0gW107XG4gICAgX2NvdW50ZXIgPSAxO1xuICAgIF9hZGRlZExpc3RlbmVycyA9IFtdO1xuICAgIF9kZWZhdWx0SWNvbiA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IobWFwKSB7XG4gICAgICAgIGlmKG1hcCkge1xuICAgICAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQl9Cw0L/Rg9GB0Log0LPQtdC90LXRgNCw0YLQvtGA0LBcbiAgICAgKi9cbiAgICBzdGFydChwYXRoLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuXG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhdGguY2xlYXIoKTtcblxuICAgICAgICAgICAgbGV0IG1hcmtlcnNBcnJheSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IG1hcmtlckpzb24gb2YgbWFya2Vyc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobWFya2VySnNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIHRoaXMuX3BhdGggPSBudWxsO1xuICAgIH1cbiAgICBcbiAgICBhcHBlbmRBZGRMaXN0ZW5lcihoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2FkZGVkTGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfVxuXG4gICAgYWRkKG1hcmtlckpzb24pIHtcbiAgICAgICAgaWYodGhpcy5fcGF0aCkge1xuICAgICAgICAgICAgbGV0IG1hcmtlciA9IG5ldyBNYXBNYXJrZXIodGhpcy5tYXAsIG1hcmtlckpzb24ucG9zaXRpb24pO1xuXG4gICAgICAgICAgICBtYXJrZXJKc29uLmxhYmVsID0gdGhpcy5fcGF0aC5tYXJrZXJzLmxlbmd0aCArIDE7XG5cbiAgICAgICAgICAgIG1hcmtlci5zZXJpYWwgPSBtYXJrZXJKc29uO1xuXG4gICAgICAgICAgICBpZihtYXJrZXIuaWNvbiA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuaWNvbiA9IHRoaXMuZGVmYXVsdEljb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3BhdGguYWRkKG1hcmtlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvcihsZXQgaGFuZGxlciBvZiB0aGlzLl9hZGRlZExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkgam9rZXIgb24gMTUuMTIuMTYuXG4gKlxuICpcbiAqL1xuaW1wb3J0IHthc3NlcnQgYXMgYXNzZXJ0fSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFBhdGgge1xuICAgIGdldCBtYXJrZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFya2VycztcbiAgICB9XG5cbiAgICBzZXQgbWFya2Vycyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tYXJrZXJzID0gdmFsdWU7XG4gICAgfVxuICAgICAgICBcbiAgICBfbWFya2VycyA9IFtdO1xuICAgIF91cGRhdGVMaXN0ZW5lcnMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqINCf0L7Qu9GD0YfQtdC90LjQtSDRgdC10YDQuNCw0LvQuNC30L7QstCw0L3QvdC+0LPQviDQvNCw0YHRgdC40LLQsFxuICAgICAqL1xuICAgIGdldCBzZXJpYWwoKSB7XG4gICAgICAgIGxldCBzZXJpYXMgPSB0aGlzLl9tYXJrZXJzLm1hcChmdW5jdGlvbiAobWFyaykge1xuICAgICAgICAgICAgcmV0dXJuIG1hcmsuc2VyaWFsO1xuICAgICAgICB9KS5qb2luKCcsJyk7XG5cbiAgICAgICAgbGV0IHJlcyA9ICdbJyArIHNlcmlhcyArICddJztcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZ2V0IGNvb3Jkc0FycmF5KCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5tYXJrZXJzLm1hcChmdW5jdGlvbiAoY29vcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb29yZC5nZXRQb3NpdGlvbigpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICBwb2ludFZhbHVlKGluZGV4LCBmaWVsZCwgdmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0KGluZGV4ID4gLTEgJiYgaW5kZXggPCB0aGlzLl9tYXJrZXJzLmxlbmd0aCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9tYXJrZXJzW2luZGV4XVtmaWVsZF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJrZXJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDQodC80LXQvdCwINC/0L7Qt9C40YbQuNC4INC40L3QtNC10LrRgdCwXG4gICAgICogQHBhcmFtIGluZGV4INCY0L3QtNC10LrRgVxuICAgICAqIEBwYXJhbSBjcmVtINCh0LzQtdGJ0LXQvdC40LVcbiAgICAgKi9cbiAgICBpbmRleERpc3Bvc2UoaW5kZXgsIGNyZW0pIHtcbiAgICAgICAgbGV0IHMgPSBpbmRleCArIGNyZW07XG5cbiAgICAgICAgYXNzZXJ0KGluZGV4ID4gLTEgJiYgaW5kZXggPCB0aGlzLl9tYXJrZXJzLmxlbmd0aCk7XG4gICAgICAgIGFzc2VydChzID4gLTEgJiYgcyA8IHRoaXMuX21hcmtlcnMubGVuZ3RoKTtcblxuICAgICAgICBsZXQgZWxlbSA9IHRoaXMuX21hcmtlcnNbc107XG5cbiAgICAgICAgdGhpcy5fbWFya2Vyc1tzXSA9IHRoaXMuX21hcmtlcnNbaW5kZXhdO1xuICAgICAgICB0aGlzLl9tYXJrZXJzW2luZGV4XSA9IGVsZW07XG5cbiAgICAgICAgdGhpcy5jYWxsVXBkYXRlSGFuZGxlcnMoKTtcbiAgICB9XG5cbiAgICBpbmRleFJlbW92ZShpbmRleCkge1xuICAgICAgICBhc3NlcnQoaW5kZXggPiAtMSAmJiBpbmRleCA8IHRoaXMuX21hcmtlcnMubGVuZ3RoKTtcblxuICAgICAgICBsZXQgZWxlbSA9IHRoaXMuX21hcmtlcnNbaW5kZXhdO1xuICAgICAgICBlbGVtLm1hcmtlci5zZXRNYXAobnVsbCk7XG5cbiAgICAgICAgdGhpcy5fbWFya2Vycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIHRoaXMuY2FsbFVwZGF0ZUhhbmRsZXJzKCk7XG4gICAgfVxuXG4gICAgZ2V0IGJvdW5kcygpIHtcbiAgICAgICAgbGV0IGJvdW5kcyAgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IG1hcmtlciBvZiB0aGlzLl9tYXJrZXJzKSB7XG4gICAgICAgICAgICBsZXQgbGF0TG5nID0gbWFya2VyLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJvdW5kcy5leHRlbmQobGF0TG5nKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG5cbiAgICBnZXQgY29vcmRzU3RyKCkge1xuICAgICAgICBsZXQgcmVzID0gJyc7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IG1hcmsgb2YgdGhpcy5fbWFya2Vycykge1xuICAgICAgICAgICAgcmVzICs9IG1hcmsuY29vcmRzU3RyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgXG4gICAgYWRkVXBkYXRlTGlzdGVuZXIoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl91cGRhdGVMaXN0ZW5lcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgZm9yKGxldCBtYXJrIG9mIHRoaXMubWFya2Vycykge1xuICAgICAgICAgICAgbWFyay5tYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXJrZXJzID0gW107XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhbGxVcGRhdGVIYW5kbGVycygpO1xuICAgIH1cblxuICAgIGNhbGxVcGRhdGVIYW5kbGVycygpIHtcbiAgICAgICAgZm9yKGxldCBoYW5kbGVyIG9mIHRoaXMuX3VwZGF0ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkKG1hcmtlcikge1xuICAgICAgICB0aGlzLm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICBtYXJrZXIubWFya2VyLmFkZExpc3RlbmVyKCdkcmFnZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsVXBkYXRlSGFuZGxlcnMoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICBpZih0aGlzLm1hcmtlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jYWxsVXBkYXRlSGFuZGxlcnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZnJlc2hMYWJlbHMoKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDE7XG4gICAgICAgIGZvcihsZXQgbWFyayBvZiB0aGlzLm1hcmtlcnMpIHtcbiAgICAgICAgICAgIGlmKG1hcmsudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIG1hcmsubGFiZWwgPSBpbmRleCArICcnO1xuICAgICAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihtYXJrZXJzKSB7XG4gICAgICAgIHRoaXMubWFya2VycyA9IG1hcmtlcnM7XG5cbiAgICAgICAgdGhpcy5hZGRVcGRhdGVMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hMYWJlbHMoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGpva2VyIG9uIDE1LjEyLjE2LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xuICAgIH1cblxuICAgIHNldCBtYXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFwID0gdmFsdWU7XG4gICAgfVxuICAgIFxuICAgIF9tYXAgPSBudWxsO1xuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKG1hcCkge1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb25zU2VydmljZSA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zU2VydmljZSgpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb25zRGlzcGxheSA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zUmVuZGVyZXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgIH1cblxuICAgIHdheXBvaW50cyhjb29yZHMpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBjb29yZHMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgbG9jYXRpb246IGNvb3Jkc1tpXSxcbiAgICAgICAgICAgICAgICBzdG9wb3ZlcjogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZW5kZXIocGF0aCkge1xuICAgICAgICBsZXQgY29vcmRzID0gcGF0aC5jb29yZHNBcnJheTtcblxuICAgICAgICBpZihjb29yZHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uc0Rpc3BsYXkuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uc0Rpc3BsYXkuc2V0TWFwKHRoaXMubWFwLm1hcCk7XG5cbiAgICAgICAgbGV0IHdheXBvaW50cyA9IHRoaXMud2F5cG9pbnRzKGNvb3Jkcyk7XG5cbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBvcmlnaW46IGNvb3Jkc1swXSxcbiAgICAgICAgICAgIHdheXBvaW50cyxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBjb29yZHNbY29vcmRzLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgdHJhdmVsTW9kZTogZ29vZ2xlLm1hcHMuVHJhdmVsTW9kZS5EUklWSU5HXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uc1NlcnZpY2Uucm91dGUocmVxdWVzdCwgZnVuY3Rpb24ocmVzcG9uc2UsIHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5EaXJlY3Rpb25zU3RhdHVzLk9LKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uc0Rpc3BsYXkuc2V0RGlyZWN0aW9ucyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBqb2tlciBvbiAxNS4xMi4xNi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbGVkXCI7XG4gICAgfVxufSJdfQ=="}