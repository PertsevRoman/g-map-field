{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/lib/map-marker.js","src/js/lib/map.js","src/js/lib/path-generator.js","src/js/lib/path.js","src/js/lib/renderer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_pathGenerator","_map","_renderer","_path","componentName","document","addEventListener","componentAnchor","getElementsByTagName","console","log","templateName","getAttribute","fieldValue","fieldName","iconsResource","$","get","_icons","data","Prof","Vue","extend","template","mounted","this","init","beginPath","pathGenerator","map","currentPath","Path","renderer","inEdit","computed","icons","methods","clear","defaultIcon","icon","start","finishPath","finish","toTop","index","indexDispose","toDown","remove","indexRemove","center","point","latLng","setCenter","clearPath","setAhead","ahead","typeahead","render","element","$el","querySelector","GMap","PathGenerator","_renderer2","default","addUpdateListener","$forceUpdate","appendAddListener","elemPosition","size","setTimeout","pickerAnchor","selector","timepicker","on","value","time","attr","pointValue","bind","google","maps","event","addListener","add","position","markerCoords","toJSON","$mount","error","./lib/map","./lib/path","./lib/path-generator","./lib/renderer","2","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","MapMarker","coords","_time","_description","_marker","_template","_label","_typeahead","Marker","draggable","_ahead","set","getDraggable","_icon","marker","setMap","_latLng","LatLng","lat","lng","undefined","dropdownResolver","points","push","setLabel","seria","visible","pos","description","label","setPosition","getPosition","createElement","load","toString","3","pointCoords","_addedListeners","_defaultIcon","path","_step","_iterator","markersArray","Symbol","iterator","_iteratorNormalCompletion","next","done","markerJson","err","_iteratorError","return","handler","_mapMarker","markers","_iteratorNormalCompletion2","_iteratorError2","_step2","_iterator2","./map-marker","./path","5","_markers","_updateListeners","refreshLabels","crem","_utils","assert","elem","splice","callUpdateHandlers","mark","_didIteratorError2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","serial","join","coord","res","_iteratorNormalCompletion4","_didIteratorError4","_step4","_iterator4","_iteratorError4","./utils","6","_directionsService","DirectionsService","result","location","coordsArray","_directionsDisplay","origin","destination","travelMode","TravelMode","DRIVING","status","DirectionsStatus","OK","Renderer","7"],"mappings":"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","file":"index.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by joker on 13.12.16.\n *\n * Получение данных\n */\n\nimport {PathGenerator} from \"./lib/path-generator\";\nimport {GMap} from \"./lib/map\";\nimport Renderer from \"./lib/renderer\";\nimport {Path} from \"./lib/path\";\n\nconst componentName = 'path-input';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let componentAnchor = document.getElementsByTagName(componentName)[0];\n\n    if(componentAnchor == null) {\n        console.log('Component tag not founded');\n        return;\n    }\n    \n    let templateName = componentAnchor.getAttribute('template');\n    let fieldValue = componentAnchor.getAttribute('field-value');\n    let fieldName = componentAnchor.getAttribute('field-name');\n    let iconsResource = componentAnchor.getAttribute('icons-resource');\n\n    $.get(iconsResource, function (icons) {\n        $.get(templateName, function (data) {\n            try {\n                let Prof = Vue.extend({\n                    template: data,\n                    mounted: function () {\n                        this.init();\n\n                        this.fieldName = fieldName;\n\n                        if(fieldValue) {\n                            this.beginPath(fieldValue);\n                        } else {\n                            this.beginPath();\n                        }\n                    },\n                    data: function () {\n                        return {\n                            pathGenerator: null,\n                            map: null,\n                            currentPath: new Path([]),\n                            renderer: null,\n                            inEdit: true,\n                            fieldName: ''\n                        };\n                    },\n                    computed: {\n                        icons: function () {\n                            return icons;\n                        }\n                    },\n                    methods: {\n                        beginPath: function (data) {\n                            if(this.currentPath) {\n                                this.currentPath.clear();\n                            }\n\n                            this.pathGenerator.defaultIcon = icons[0].icon;\n                            this.pathGenerator.start(this.currentPath, data);\n                        },\n                        finishPath: function () {\n                            this.pathGenerator.finish();\n                        },\n                        toTop: function (index) {\n                            this.currentPath.indexDispose(index, -1);\n                        },\n                        toDown: function (index) {\n                            this.currentPath.indexDispose(index, 1);\n                        },\n                        remove: function (index) {\n                            this.currentPath.indexRemove(index);\n                        },\n                        center: function (point) {\n                            let latLng = point.latLng;\n\n                            this.map.map.setCenter(latLng);\n                        },\n                        clearPath: function () {\n                            this.currentPath.clear();\n                        },\n                        setAhead: function (point, ahead) {\n                            point.setAhead(ahead);\n                            point.typeahead = [];\n                            \n                            this.renderer.render(this.currentPath);\n                        },\n                        init: function () {\n                            let element = this.$el.querySelector('.g-maps');\n\n                            this.map = new GMap(element);\n                            this.pathGenerator = new PathGenerator(this.map);\n                            this.renderer = new Renderer(this.map);\n\n                            this.currentPath.addUpdateListener(function () {\n                                /* rem-block */\n                                console.log('Path updating...');\n                                /* end-rem-block */\n\n                                this.renderer.render(this.currentPath);\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            this.pathGenerator.appendAddListener(function () {\n                                const elemPosition = this.currentPath.size;\n\n                                /* rem-block */\n                                console.log('Adding point...');\n                                /* end-rem-block */\n\n                                setTimeout(function () {\n                                    const selector = 'input[date-time=\"dt-' + (elemPosition - 1) + '\"]';\n                                    const pickerAnchor = $(selector);\n\n                                    pickerAnchor.timepicker({\n                                        showMeridian: false\n                                    }).on('changeTime.timepicker', function (e) {\n                                        const value = e.time.value;\n                                        let index = pickerAnchor.attr('data-index');\n\n                                        this.currentPath.pointValue(index, 'time', value);\n\n                                        /* rem-block */\n                                        console.log('Point added');\n                                        /* end-rem-block */\n                                    }.bind(this));\n                                }.bind(this), 500);\n                            }.bind(this));\n\n                            google.maps.event.addListener(this.map.map, 'click', function(event) {\n                                const markerCoords = event.latLng;\n\n                                this.pathGenerator.add({\n                                    position: markerCoords.toJSON()\n                                });\n\n                                this.$forceUpdate();\n                            }.bind(this));\n                        }\n                    }\n                });\n\n                /* rem-block */\n                console.log('Load component...');\n                /* end-rem-block */\n\n                new Prof().$mount(componentName);\n            } catch (error) {\n                console.log(error);\n                console.log('Не удается определить компонент: Vue.js не инициализирован');\n            }\n        });\n    });\n});","/**\n * Created by joker on 15.12.16.\n */\nexport class MapMarker {\n    get typeahead() {\n        return this._typeahead;\n    }\n\n    set typeahead(value) {\n        this._typeahead = value;\n    }\n    get draggable() {\n        return this._marker.getDraggable();\n    }\n\n    set draggable(value) {\n        this._marker.setDraggable(value);\n    }\n    get icon() {\n        return this._icon;\n    }\n    get time() {\n        return this._time;\n    }\n\n    set time(value) {\n        this._time = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n        this.marker.setMap(value.map);\n    }\n    get latLng() {\n        return this._latLng;\n    }\n\n    set latLng(value) {\n        this._latLng = value;\n\n        this.marker.setPosition(new google.maps.LatLng(value.lat, value.lng));\n    }\n\n    get visible() {\n        return this._marker.getVisible();\n    }\n\n    set visible(value) {\n        this._marker.setVisible(value);\n        this._visible = value;\n    }\n    get description() {\n        return this._description;\n    }\n\n    set icon(path) {\n        this._icon = path;\n    }\n\n    set description(value) {\n        this._description = value;\n\n        if(this._ahead) {\n            this._ahead = false;\n            return;\n        }\n\n        if(this._description != '') {\n            if(dropdownResolver != undefined) {\n                dropdownResolver(value, function (points) {\n                    this._typeahead = [];\n                    for(let index in points) {\n                        this._typeahead.push({\n                            name: points[index].name,\n                            lat: points[index].lat,\n                            lng: points[index].lng\n                        });\n                    }\n                }.bind(this));\n            }\n        } else {\n            this._typeahead = [];\n        }\n    }\n    \n    get label() {\n        return this._label;\n    }\n\n    set label(value) {\n        this._label = value;\n\n        if(this._marker) {\n            this._marker.setLabel(value);\n        }\n    }\n    get marker() {\n        return this._marker;\n    }\n    get template() {\n        return this._template;\n    }\n\n    set template(value) {\n        this._template = value;\n    }\n\n    get serial() {\n        let seria = {\n            description: this.description,\n            position: this.marker.getPosition().toJSON(),\n            visible: this.visible,\n            time: this.time,\n            icon: this.icon,\n            draggable: this.draggable\n        };\n\n        return JSON.stringify(seria);\n    }\n    \n    remove() {\n        this.marker.setMap(null);\n    }\n\n    setAhead(ahead) {\n        this._ahead = true;\n\n        this.description = ahead.name;\n\n        const position = {\n            lat: ahead.lat,\n            lng: ahead.lng\n        };\n\n        this.latLng = position;\n    }\n\n    set serial(value) {\n        let pos = value.position;\n\n        this.latLng = new google.maps.LatLng(pos);\n        this.description = value.description || '';\n        if(value.label) {\n            this.label = value.label + '';\n        }\n        \n        if(typeof value.visible === 'boolean') {\n            this.visible = value.visible;\n        } else {\n            this.visible = true;\n        }\n\n        this.time = value.time || '0:00';\n        this.icon = value.icon || '';\n\n        this.marker.setPosition(this.latLng);\n        this.marker.setLabel(this.label);\n        this.marker.setVisible(this.visible);\n    }\n\n    constructor(map, coords, template) {\n        if(!map) {\n            throw 'Не определена карта';\n        }\n\n        this._marker = new google.maps.Marker({\n            map: map.map,\n            position: coords,\n            draggable: true\n        });\n        \n        this.map = map;\n\n        if(template) {\n            this.template = template;\n        }\n    }\n\n    _time = '';\n    _map = null;\n    _latLng = {};\n    _description = '';\n    _marker = null;\n    _template = 'content.html';\n    _label = '';\n    _visible = true;\n    _icon = '';\n    _typeahead = [];\n\n    getPosition() {\n        return this._marker.getPosition();\n    }\n\n    get coordsStr() {\n        let pos = this.getPosition();\n        return pos.toString();\n    }\n\n    addInfo() {\n        let data = document.createElement('div');\n\n        $(data).load('src/tpl/' + this.template);\n\n        let infowindow = new google.maps.InfoWindow({\n            content: data\n        });\n\n        this._marker.addListener('mouseover', function() {\n            infowindow.open(map, this._marker);\n        });\n\n        this._marker.addListener('mouseout', function() {\n            infowindow.close();\n        });\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport class GMap {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n\n    /**\n     * Ссылка на объект карт\n     */\n    _map;\n\n    constructor(element) {\n        var pointCoords = {lat: 52.61667, lng: 39.6000};\n\n        this._map = new google.maps.Map(element, {\n            center: pointCoords,\n            zoom: 16\n        });\n\n        google.maps.event.trigger(this._map, 'resize');\n    }\n}","import {Path} from \"./path\";\nimport {MapMarker} from \"./map-marker\";\n/**\n * Created by joker on 15.12.16.\n */\n\nexport class PathGenerator {\n    get defaultIcon() {\n        return this._defaultIcon;\n    }\n\n    set defaultIcon(value) {\n        this._defaultIcon = value;\n    }\n    get counter() {\n        return this._counter;\n    }\n\n    set counter(value) {\n        this._counter = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    _map;\n    _path = [];\n    _counter = 1;\n    _addedListeners = [];\n    _defaultIcon = '';\n\n    constructor(map) {\n        if(map) {\n            this.map = map;\n        }\n    }\n\n    /**\n     * Запуск генератора\n     */\n    start(path, data) {\n        this._path = path;\n\n        if(data) {\n            this._path.clear();\n\n            let markersArray = JSON.parse(data);\n\n            for (let markerJson of markersArray) {\n                this.add(markerJson);\n            }\n        }\n    }\n\n    finish() {\n        this._path = null;\n    }\n    \n    appendAddListener(handler) {\n        this._addedListeners.push(handler);\n    }\n\n    add(markerJson) {\n        if(this._path) {\n            let marker = new MapMarker(this.map, markerJson.position);\n\n            markerJson.label = this._path.markers.length + 1;\n\n            marker.serial = markerJson;\n\n            if(marker.icon === '') {\n                marker.icon = this.defaultIcon;\n            }\n\n            this._path.add(marker);\n            \n            for(let handler of this._addedListeners) {\n                handler();\n            }\n        }\n    }\n}","/**\n * Created by joker on 15.12.16.\n *\n *\n */\nimport {assert as assert} from './utils';\n\nexport class Path {\n    get markers() {\n        return this._markers;\n    }\n\n    set markers(value) {\n        this._markers = value;\n    }\n        \n    _markers = [];\n    _updateListeners = [];\n\n    /**\n     * Получение сериализованного массива\n     */\n    get serial() {\n        let serias = this._markers.map(function (mark) {\n            return mark.serial;\n        }).join(',');\n\n        let res = '[' + serias + ']';\n        \n        return res;\n    }\n\n    get coordsArray() {\n        let result = this.markers.map(function (coord) {\n            return coord.getPosition();\n        });\n\n        return result;\n    }\n    \n    pointValue(index, field, value) {\n        assert(index > -1 && index < this._markers.length);\n        \n        this._markers[index][field] = value;\n    }\n    \n    get size() {\n        return this._markers.length;\n    }\n\n    /**\n     * Смена позиции индекса\n     * @param index Индекс\n     * @param crem Смещение\n     */\n    indexDispose(index, crem) {\n        let s = index + crem;\n\n        assert(index > -1 && index < this._markers.length);\n        assert(s > -1 && s < this._markers.length);\n\n        let elem = this._markers[s];\n\n        this._markers[s] = this._markers[index];\n        this._markers[index] = elem;\n\n        this.callUpdateHandlers();\n    }\n\n    indexRemove(index) {\n        assert(index > -1 && index < this._markers.length);\n\n        let elem = this._markers[index];\n        elem.marker.setMap(null);\n\n        this._markers.splice(index, 1);\n\n        this.callUpdateHandlers();\n    }\n\n    get coordsStr() {\n        let res = '';\n        \n        for(let mark of this._markers) {\n            res += mark.coordsStr;\n        }\n\n        return res;\n    }\n    \n    addUpdateListener(handler) {\n        this._updateListeners.push(handler);\n    }\n\n    clear() {\n        for(let mark of this.markers) {\n            mark.marker.setMap(null);\n        }\n\n        this.markers = [];\n        \n        this.callUpdateHandlers();\n    }\n\n    callUpdateHandlers() {\n        for(let handler of this._updateListeners) {\n            handler();\n        }\n    }\n\n    add(marker) {\n        this.markers.push(marker);\n        marker.marker.addListener('dragend', function () {\n            this.callUpdateHandlers();\n        }.bind(this));\n\n        if(this.markers.length > 1) {\n            this.callUpdateHandlers();\n        }\n    }\n\n    refreshLabels() {\n        let index = 1;\n        for(let mark of this.markers) {\n            if(mark.visible) {\n                mark.label = index + '';\n                index += 1;\n            }\n        }\n    }\n\n    constructor(markers) {\n        this.markers = markers;\n\n        this.addUpdateListener(function () {\n            this.refreshLabels();\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport default class Renderer {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    \n    _map = null;\n    \n    \n    constructor(map) {\n        this._directionsService = new google.maps.DirectionsService();\n        this._directionsDisplay = new google.maps.DirectionsRenderer();\n        \n        this.map = map;\n    }\n\n    waypoints(coords) {\n        let result = [];\n\n        for(let i = 1; i < coords.length - 1; ++i) {\n            result.push({\n                location: coords[i],\n                stopover: false\n            });\n        }\n\n        return result;\n    }\n\n    render(path) {\n        let coords = path.coordsArray;\n\n        if(coords.length < 2) {\n            this._directionsDisplay.setMap(null);\n            return;\n        }\n\n        this._directionsDisplay.setMap(this.map.map);\n\n        let waypoints = this.waypoints(coords);\n\n        let request = {\n            origin: coords[0],\n            waypoints,\n            destination: coords[coords.length - 1],\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n\n        this._directionsService.route(request, function(response, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                this._directionsDisplay.setDirections(response);\n            }\n        }.bind(this));\n    }\n}"]}