{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","src/js/lib/map-marker.js","src/js/lib/map.js","src/js/lib/path-generator.js","src/js/lib/path.js","src/js/lib/renderer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_pathGenerator","_map","_renderer","_path","componentName","document","addEventListener","componentAnchor","getElementsByTagName","console","log","templateName","getAttribute","fieldValue","fieldName","iconsResource","$","get","_icons","data","Prof","Vue","extend","template","mounted","this","init","beginPath","pathGenerator","map","currentPath","Path","renderer","inEdit","computed","icons","methods","fitContainer","bounds","fitBounds","panToBounds","clear","defaultIcon","icon","start","finishPath","finish","toTop","index","indexDispose","toDown","remove","indexRemove","center","point","latLng","setCenter","clearPath","setAhead","ahead","render","element","$el","querySelector","GMap","PathGenerator","_renderer2","default","addUpdateListener","$forceUpdate","appendAddListener","elemPosition","size","setTimeout","pickerAnchor","selector","timepicker","on","value","time","attr","pointValue","bind","google","maps","event","addListener","add","position","markerCoords","toJSON","error","./lib/map","./lib/path","./lib/path-generator","./lib/renderer","2","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","MapMarker","coords","_time","_description","_marker","_template","_label","typeahead","_meta","Marker","draggable","_ahead","meta","set","getDraggable","_icon","marker","setMap","_latLng","LatLng","lat","lng","undefined","dropdownResolver","points","id","name","display","push","item","setLabel","seria","visible","pos","description","label","setPosition","setVisible","getPosition","createElement","load","toString","3","pointCoords","trigger","_addedListeners","_defaultIcon","path","_step","_iterator","markersArray","Symbol","iterator","_iteratorNormalCompletion","next","done","markerJson","err","_iteratorError","return","handler","_mapMarker","markers","_iteratorNormalCompletion2","_iteratorError2","_step2","_iterator2","./map-marker","./path","5","_markers","_updateListeners","refreshLabels","crem","_utils","assert","elem","splice","callUpdateHandlers","mark","_didIteratorError2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","serial","join","coord","LatLngBounds","_iteratorNormalCompletion4","_didIteratorError4","_step4","_iterator4","_iteratorError4","res","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","./utils","6","_directionsService","DirectionsService","result","location","coordsArray","_directionsDisplay","origin","destination","travelMode","TravelMode","DRIVING","status","DirectionsStatus","OK","Renderer","7"],"mappings":"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","file":"index.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by joker on 13.12.16.\n *\n * Получение данных\n */\n\nimport {PathGenerator} from \"./lib/path-generator\";\nimport {GMap} from \"./lib/map\";\nimport Renderer from \"./lib/renderer\";\nimport {Path} from \"./lib/path\";\n\nconst componentName = 'path-input';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    let componentAnchor = document.getElementsByTagName(componentName)[0];\n\n    if(componentAnchor == null) {\n        console.log('Component tag not founded');\n        return;\n    }\n    \n    let templateName = componentAnchor.getAttribute('template');\n    let fieldValue = componentAnchor.getAttribute('field-value');\n    let fieldName = componentAnchor.getAttribute('field-name');\n    let iconsResource = componentAnchor.getAttribute('icons-resource');\n\n    $.get(iconsResource, function (icons) {\n        $.get(templateName, function (data) {\n            try {\n                let Prof = Vue.extend({\n                    template: data,\n                    mounted: function () {\n                        this.init();\n\n                        this.fieldName = fieldName;\n\n                        if(fieldValue) {\n                            this.beginPath(fieldValue);\n                        } else {\n                            this.beginPath();\n                        }\n                    },\n                    data: function () {\n                        return {\n                            pathGenerator: null,\n                            map: null,\n                            currentPath: new Path([]),\n                            renderer: null,\n                            inEdit: true,\n                            fieldName: ''\n                        };\n                    },\n                    computed: {\n                        icons: function () {\n                            return icons;\n                        }\n                    },\n                    methods: {\n                        fitContainer: function () {\n                            let bounds = this.currentPath.bounds;\n\n                            this.map.map.fitBounds(bounds);\n                            this.map.map.panToBounds(bounds);\n                        },\n                        beginPath: function (data) {\n                            if(this.currentPath) {\n                                this.currentPath.clear();\n                            }\n\n                            this.pathGenerator.defaultIcon = icons[0].icon;\n                            this.pathGenerator.start(this.currentPath, data);\n                        },\n                        finishPath: function () {\n                            this.pathGenerator.finish();\n                        },\n                        toTop: function (index) {\n                            this.currentPath.indexDispose(index, -1);\n                        },\n                        toDown: function (index) {\n                            this.currentPath.indexDispose(index, 1);\n                        },\n                        remove: function (index) {\n                            this.currentPath.indexRemove(index);\n                        },\n                        center: function (point) {\n                            let latLng = point.latLng;\n\n                            this.map.map.setCenter(latLng);\n                        },\n                        clearPath: function () {\n                            this.currentPath.clear();\n                        },\n                        setAhead: function (point, ahead) {\n                            point.setAhead(ahead);\n                            \n                            this.renderer.render(this.currentPath);\n                        },\n                        init: function () {\n                            let element = this.$el.querySelector('.g-maps');\n\n                            this.map = new GMap(element);\n                            this.pathGenerator = new PathGenerator(this.map);\n                            this.renderer = new Renderer(this.map);\n\n                            this.currentPath.addUpdateListener(function () {\n                                /* rem-block */\n                                console.log('Path updating...');\n                                /* end-rem-block */\n\n                                this.renderer.render(this.currentPath);\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            this.pathGenerator.appendAddListener(function () {\n                                const elemPosition = this.currentPath.size;\n\n                                /* rem-block */\n                                console.log('Adding point...');\n                                /* end-rem-block */\n\n                                setTimeout(function () {\n                                    const selector = 'input[date-time=\"dt-' + (elemPosition - 1) + '\"]';\n                                    const pickerAnchor = $(selector);\n\n                                    pickerAnchor.timepicker({\n                                        showMeridian: false\n                                    }).on('changeTime.timepicker', function (e) {\n                                        const value = e.time.value;\n                                        let index = pickerAnchor.attr('data-index');\n\n                                        this.currentPath.pointValue(index, 'time', value);\n\n                                        /* rem-block */\n                                        console.log('Point added');\n                                        /* end-rem-block */\n                                    }.bind(this));\n                                }.bind(this), 500);\n                            }.bind(this));\n\n                            google.maps.event.addListener(this.map.map, 'click', function(event) {\n                                const markerCoords = event.latLng;\n\n                                this.pathGenerator.add({\n                                    position: markerCoords.toJSON()\n                                });\n\n                                this.$forceUpdate();\n                            }.bind(this));\n\n                            setTimeout(function () {\n                                this.fitContainer();\n                            }.bind(this), 1000);\n                        }\n                    }\n                });\n\n                /* rem-block */\n                console.log('Load component...');\n                /* end-rem-block */\n\n                new Prof().$mount(componentName);\n            } catch (error) {\n                console.log(error);\n                console.log('Не удается определить компонент: Vue.js не инициализирован');\n            }\n        });\n    });\n});","/**\n * Created by joker on 15.12.16.\n */\nexport class MapMarker {\n    get meta() {\n        return this._meta;\n    }\n\n    set meta(value) {\n        this._meta = value;\n    }\n\n    get draggable() {\n        return this._marker.getDraggable();\n    }\n\n    set draggable(value) {\n        this._marker.setDraggable(value);\n    }\n    get icon() {\n        return this._icon;\n    }\n    get time() {\n        return this._time;\n    }\n\n    set time(value) {\n        this._time = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n        this.marker.setMap(value.map);\n    }\n    get latLng() {\n        return this._latLng;\n    }\n\n    set latLng(value) {\n        this._latLng = value;\n\n        this.marker.setPosition(new google.maps.LatLng(value.lat, value.lng));\n    }\n\n    get visible() {\n        return this._marker.getVisible();\n    }\n\n    set visible(value) {\n        this._marker.setVisible(value);\n        this._visible = value;\n    }\n    get description() {\n        return this._description;\n    }\n\n    set icon(path) {\n        this._icon = path;\n    }\n\n    set description(value) {\n        this._description = value;\n\n        if(this._ahead) {\n            this._ahead = false;\n            return;\n        }\n\n        if(this._description != '') {\n            if(dropdownResolver != undefined) {\n                dropdownResolver(value, function (points) {\n                    let typeahead = [];\n                    \n                    for(let index in points) {\n                        let item = {\n                            _meta: {\n                                id: points[index].id\n                            },\n                            name: points[index].name,\n                            lat: points[index].lat,\n                            lng: points[index].lng\n                        };\n\n                        if(points[index].display != undefined) {\n                            item['display'] = points[index].display;\n                        }\n\n                        typeahead.push(item);\n                    }\n\n                    this.typeahead = typeahead;\n                }.bind(this));\n            }\n        } else {\n            this.typeahead = [];\n        }\n    }\n    \n    get label() {\n        return this._label;\n    }\n\n    set label(value) {\n        this._label = value;\n\n        if(this._marker) {\n            this._marker.setLabel(value);\n        }\n    }\n    get marker() {\n        return this._marker;\n    }\n    get template() {\n        return this._template;\n    }\n\n    set template(value) {\n        this._template = value;\n    }\n\n    get serial() {\n        let seria = {\n            description: this.description,\n            position: this.marker.getPosition().toJSON(),\n            visible: this.visible,\n            time: this.time,\n            icon: this.icon,\n            draggable: this.draggable,\n            meta: this.meta\n        };\n\n        return JSON.stringify(seria);\n    }\n    \n    remove() {\n        this.marker.setMap(null);\n    }\n\n    setAhead(ahead) {\n        this._ahead = true;\n\n        this.description = ahead.name;\n\n        const position = {\n            lat: ahead.lat,\n            lng: ahead.lng\n        };\n\n        if(ahead['display'] != undefined) {\n            if(ahead['display']['svg'] != undefined) {\n                this.icon = ahead['display']['svg'];\n            }\n        }\n\n        this.latLng = position;\n        this.meta = ahead._meta;\n\n        this.typeahead = [];\n    }\n\n    set serial(value) {\n        let pos = value.position;\n\n        this.latLng = new google.maps.LatLng(pos);\n\n        this._ahead = true;\n        this.description = value.description || '';\n\n        if(value.label) {\n            this.label = value.label + '';\n        }\n        \n        if(typeof value.visible === 'boolean') {\n            this.visible = value.visible;\n        } else {\n            this.visible = true;\n        }\n\n        this.time = value.time || '0:00';\n        this.icon = value.icon || '';\n        this.meta = value.meta || {};\n\n        this.marker.setPosition(this.latLng);\n        this.marker.setLabel(this.label);\n        this.marker.setVisible(this.visible);\n    }\n\n    constructor(map, coords, template) {\n        if(!map) {\n            throw 'Не определена карта';\n        }\n\n        this._marker = new google.maps.Marker({\n            map: map.map,\n            position: coords,\n            draggable: true\n        });\n        \n        this.map = map;\n\n        if(template) {\n            this.template = template;\n        }\n    }\n\n    _time = '';\n    _map = null;\n    _latLng = {};\n    _description = '';\n    _marker = null;\n    _template = 'content.html';\n    _label = '';\n    _visible = true;\n    _icon = '';\n    typeahead = [];\n    _meta = {};\n\n    getPosition() {\n        return this._marker.getPosition();\n    }\n\n    get coordsStr() {\n        let pos = this.getPosition();\n        return pos.toString();\n    }\n\n    addInfo() {\n        let data = document.createElement('div');\n\n        $(data).load('src/tpl/' + this.template);\n\n        let infowindow = new google.maps.InfoWindow({\n            content: data\n        });\n\n        this._marker.addListener('mouseover', function() {\n            infowindow.open(map, this._marker);\n        });\n\n        this._marker.addListener('mouseout', function() {\n            infowindow.close();\n        });\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport class GMap {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n\n    /**\n     * Ссылка на объект карт\n     */\n    _map;\n\n    constructor(element) {\n        var pointCoords = {\n            lat: 52.61667,\n            lng: 39.6000\n        };\n\n        this._map = new google.maps.Map(element, {\n            center: pointCoords,\n            zoom: 16\n        });\n\n        google.maps.event.trigger(this._map, 'resize');\n    }\n}","import {Path} from \"./path\";\nimport {MapMarker} from \"./map-marker\";\n/**\n * Created by joker on 15.12.16.\n */\n\nexport class PathGenerator {\n    get defaultIcon() {\n        return this._defaultIcon;\n    }\n\n    set defaultIcon(value) {\n        this._defaultIcon = value;\n    }\n    get counter() {\n        return this._counter;\n    }\n\n    set counter(value) {\n        this._counter = value;\n    }\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    _map;\n    _path = [];\n    _counter = 1;\n    _addedListeners = [];\n    _defaultIcon = '';\n\n    constructor(map) {\n        if(map) {\n            this.map = map;\n        }\n    }\n\n    /**\n     * Запуск генератора\n     */\n    start(path, data) {\n        this._path = path;\n\n        if(data) {\n            this._path.clear();\n\n            let markersArray = JSON.parse(data);\n\n            for (let markerJson of markersArray) {\n                this.add(markerJson);\n            }\n        }\n    }\n\n    finish() {\n        this._path = null;\n    }\n    \n    appendAddListener(handler) {\n        this._addedListeners.push(handler);\n    }\n\n    add(markerJson) {\n        if(this._path) {\n            let marker = new MapMarker(this.map, markerJson.position);\n\n            markerJson.label = this._path.markers.length + 1;\n\n            marker.serial = markerJson;\n\n            if(marker.icon === '') {\n                marker.icon = this.defaultIcon;\n            }\n\n            this._path.add(marker);\n            \n            for(let handler of this._addedListeners) {\n                handler();\n            }\n        }\n    }\n}","/**\n * Created by joker on 15.12.16.\n *\n *\n */\nimport {assert as assert} from './utils';\n\nexport class Path {\n    get markers() {\n        return this._markers;\n    }\n\n    set markers(value) {\n        this._markers = value;\n    }\n        \n    _markers = [];\n    _updateListeners = [];\n\n    /**\n     * Получение сериализованного массива\n     */\n    get serial() {\n        let serias = this._markers.map(function (mark) {\n            return mark.serial;\n        }).join(',');\n\n        let res = '[' + serias + ']';\n        \n        return res;\n    }\n\n    get coordsArray() {\n        let result = this.markers.map(function (coord) {\n            return coord.getPosition();\n        });\n\n        return result;\n    }\n    \n    pointValue(index, field, value) {\n        assert(index > -1 && index < this._markers.length);\n        \n        this._markers[index][field] = value;\n    }\n    \n    get size() {\n        return this._markers.length;\n    }\n\n    /**\n     * Смена позиции индекса\n     * @param index Индекс\n     * @param crem Смещение\n     */\n    indexDispose(index, crem) {\n        let s = index + crem;\n\n        assert(index > -1 && index < this._markers.length);\n        assert(s > -1 && s < this._markers.length);\n\n        let elem = this._markers[s];\n\n        this._markers[s] = this._markers[index];\n        this._markers[index] = elem;\n\n        this.callUpdateHandlers();\n    }\n\n    indexRemove(index) {\n        assert(index > -1 && index < this._markers.length);\n\n        let elem = this._markers[index];\n        elem.marker.setMap(null);\n\n        this._markers.splice(index, 1);\n\n        this.callUpdateHandlers();\n    }\n\n    get bounds() {\n        let bounds  = new google.maps.LatLngBounds();\n        \n        for(let marker of this._markers) {\n            let latLng = marker.getPosition();\n            \n            bounds.extend(latLng);\n        }\n        \n        return bounds;\n    }\n\n    get coordsStr() {\n        let res = '';\n        \n        for(let mark of this._markers) {\n            res += mark.coordsStr;\n        }\n\n        return res;\n    }\n    \n    addUpdateListener(handler) {\n        this._updateListeners.push(handler);\n    }\n\n    clear() {\n        for(let mark of this.markers) {\n            mark.marker.setMap(null);\n        }\n\n        this.markers = [];\n        \n        this.callUpdateHandlers();\n    }\n\n    callUpdateHandlers() {\n        for(let handler of this._updateListeners) {\n            handler();\n        }\n    }\n\n    add(marker) {\n        this.markers.push(marker);\n        marker.marker.addListener('dragend', function () {\n            this.callUpdateHandlers();\n        }.bind(this));\n\n        if(this.markers.length > 1) {\n            this.callUpdateHandlers();\n        }\n    }\n\n    refreshLabels() {\n        let index = 1;\n        for(let mark of this.markers) {\n            if(mark.visible) {\n                mark.label = index + '';\n                index += 1;\n            }\n        }\n    }\n\n    constructor(markers) {\n        this.markers = markers;\n\n        this.addUpdateListener(function () {\n            this.refreshLabels();\n        }.bind(this));\n    }\n}","/**\n * Created by joker on 15.12.16.\n */\n\nexport default class Renderer {\n    get map() {\n        return this._map;\n    }\n\n    set map(value) {\n        this._map = value;\n    }\n    \n    _map = null;\n    \n    \n    constructor(map) {\n        this._directionsService = new google.maps.DirectionsService();\n        this._directionsDisplay = new google.maps.DirectionsRenderer();\n        \n        this.map = map;\n    }\n\n    waypoints(coords) {\n        let result = [];\n\n        for(let i = 1; i < coords.length - 1; ++i) {\n            result.push({\n                location: coords[i],\n                stopover: false\n            });\n        }\n\n        return result;\n    }\n\n    render(path) {\n        let coords = path.coordsArray;\n\n        if(coords.length < 2) {\n            this._directionsDisplay.setMap(null);\n            return;\n        }\n\n        this._directionsDisplay.setMap(this.map.map);\n\n        let waypoints = this.waypoints(coords);\n\n        let request = {\n            origin: coords[0],\n            waypoints,\n            destination: coords[coords.length - 1],\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n\n        this._directionsService.route(request, function(response, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                this._directionsDisplay.setDirections(response);\n            }\n        }.bind(this));\n    }\n}"]}